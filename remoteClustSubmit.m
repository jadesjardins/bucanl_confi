function remoteClustSubmit(FcnName,taskInCell)

global option_remoteclust

if isempty(option_remoteclust)
    disp('no option_remoteclust structure found... quitting.')
else
    % Define cluster variables variables...
    
    % Create a scheduler object...
    sched = findResource('scheduler', 'type', 'generic');
    
    % Set scheduler parameters...
    set(sched, 'SubmitFcn', {@batch_distributedSubmitFcn, ...
        option_remoteclust.clustHost, ...
        option_remoteclust.remoteOutputLocation, ...
        option_remoteclust.nNodes, ...
        option_remoteclust.procPerNode, ...
        option_remoteclust.nodeProp, ...
        option_remoteclust.wallTime, ...
        option_remoteclust.jobMem, ...
        option_remoteclust.jobVMem});
    
    set(sched, 'DataLocation', option_remoteclust.localOutputLocation);
    set(sched, 'ClusterMatlabRoot', option_remoteclust.clustMatlabRoot);
    set(sched, 'GetJobStateFcn', @getJobStateFcn);
    set(sched, 'DestroyJobFcn', @destroyJobFcn);
    set(sched, 'HasSharedFilesystem', option_remoteclust.hasSharedFileSystem);
    set(sched, 'ClusterOsType', option_remoteclust.clustOSType);
    
    %Create remotePath string...
    localPath=genpath(option_remoteclust.localDependencyRootPath);
    remotePath=strrep(localPath,option_remoteclust.localDependencyRootPath,option_remoteclust.remoteDependencyRootPath);
    
    % Create the distributed job object...
    djob=createJob(sched,'PathDependencies', {remotePath});
    
    
    %submit job
    % Create task...
    eval(['t = createTask(djob, @' FcnName ', 0, taskInCell)']);
    
    
    % Adjuct djob to collect command window output...
    allTasks=get(djob,'Tasks');
    set(allTasks,'CaptureCommandWindowOutput', true);
    
    % Submit the job...
    submit(djob)
end
